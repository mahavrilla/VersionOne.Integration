<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<groupId>com.versionone</groupId>
	<artifactId>git-integration</artifactId>
	<version>10.0.0</version>
	<packaging>jar</packaging>
	
	<name>VersionOne Integration for Git</name>
	<description>The VersionOne Integration for Git creates a record of Git commits in VersionOne, so the development team can quickly view all of the code changes for a story or defect. This visibility can be useful when tracking down defects or performing code reviews.</description>
	<url>https://github.com/versionone/VersionOne.Integration.Git</url>
	
	<organization>
		<name>Version One, Inc.</name>
		<url>http://www.versionone.com/</url>
	</organization>
	<licenses>
		<license>
			<name>Modified BSD (3-clause) License</name>
			<url>https://raw.github.com/versionone/VersionOne.Integration.Git/master/LICENSE.md</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	<issueManagement>
		<system>GitHub Issues</system>
		<url>https://github.com/versionone/VersionOne.Integration.Git/issues</url>
	</issueManagement>
	<scm>
		<url>https://github.com/versionone/VersionOne.Integration.Git</url>
		<connection>scm:git:git@github.com:versionone/VersionOne.Integration.Git.git</connection>
		<developerConnection>scm:git:git@github.com:versionone/VersionOne.Integration.Git.git</developerConnection>
	</scm>
	<developers>
		<developer>
			<name>Ian Buchanan</name>
			<email>ian.buchanan@versionone.com</email>
		</developer>
	</developers>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<github.global.server>github</github.global.server>
		<assembleDirectory>${project.build.directory}/generated-resources/appassembler/jsw/v1git</assembleDirectory>
		<VERSION_NUMBER>${project.version}</VERSION_NUMBER>
	</properties>
	<build>
		<plugins>
			<!-- Put binaries into a jar with properties for version and main class -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<index>true</index>
						<manifest>
							<addClasspath>true</addClasspath>
						</manifest>
						<manifestEntries>
							<Main-Class>com.versionone.git.Main</Main-Class>
							<Build-Version>${project.version}</Build-Version>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<!-- Put source code into a jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Run unit tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>true</skipTests>
					<additionalClasspathElements>
						<additionalClasspathElement>${project.build.testOutputDirectory}</additionalClasspathElement>
					</additionalClasspathElements>
					<includes>
						<include>**/*Tester.java</include>
					</includes>
				</configuration>
			</plugin>
			<!-- Calculate code coverage of unit tests -->			
			<!-- Put javadoc into a jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Generate a project web site using markdown files -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.doxia</groupId>
						<artifactId>doxia-module-markdown</artifactId>
						<version>1.4</version>
					</dependency>
				</dependencies>
			</plugin>
			<!-- Upload generated project web site to gh-pages for public consumption -->
			<plugin>
				<groupId>com.github.github</groupId>
				<artifactId>site-maven-plugin</artifactId>
				<configuration>
					<message>Creating site for ${project.artifactId} ${project.version}</message>
					<!-- <dryRun>true</dryRun> -->
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>site</goal>
						</goals>
						<phase>site</phase>
					</execution>
				</executions>
			</plugin>
			<!-- Generate OS-specific wrapper scripts for running as a service -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
				<configuration>
					<repositoryLayout>flat</repositoryLayout>
					<assembleDirectory>${assembleDirectory}</assembleDirectory>
					<daemons>
						<daemon>
							<id>v1git</id>
							<mainClass>com.versionone.git.ServiceHandler</mainClass>
							<commandLineArguments>
								<commandLineArgument>start</commandLineArgument>
							</commandLineArguments>
							<generatorConfigurations>
								<generatorConfiguration>
									<generator>jsw</generator>
									<!-- Only include wrappers for Linux, Mac, and Windows -->
									<includes>
										<include>linux-x86-32</include>
										<include>linux-x86-64</include>
										<include>macosx-universal-32</include>
										<include>macosx-universal-64</include>
										<include>windows-x86-32</include>
										<include>windows-x86-64</include>
									</includes>
									<configuration>
										<property>
											<name>configuration.directory.in.classpath.first</name>
											<value>conf</value>
										</property>
										<property>
											<name>wrapper.logfile</name>
											<value>logs/wrapper.log</value>
										</property>
										<property>
											<name>derby.stream.error.file</name>
											<value>logs/derby.log</value>
										</property>
									</configuration>
								</generatorConfiguration>
							</generatorConfigurations>
							<platforms>
								<platform>jsw</platform>
							</platforms>
						</daemon>
					</daemons>
				</configuration>
				<executions>
					<execution>
						<id>generate-jsw-scripts</id>
						<phase>package</phase>
						<goals>
							<goal>generate-daemons</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Copy config files and create directory for logging -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>config</id>
						<phase>process-resources</phase>
						<configuration>
							<tasks>
								<copy todir="${assembleDirectory}/conf">
									<fileset dir="src/main/conf" />
								</copy>
								<mkdir dir="${assembleDirectory}/logs" />
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Write out maven properties so they can be used by Jenkins -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>generate-resources</phase>
						<goals>
							<goal>write-project-properties</goal>
						</goals>
						<configuration>
							<outputFile>
								${project.build.directory}/maven.properties
							</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-antrun-plugin
										</artifactId>
										<versionRange>
											[1.3,)
										</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											properties-maven-plugin
										</artifactId>
										<versionRange>
											[1.0-alpha-2,)
										</versionRange>
										<goals>
											<goal>
												read-project-properties
											</goal>
											<goal>
												write-project-properties
											</goal>
											<goal>
												write-active-profile-properties
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<repositories>
		<repository>
			<id>BUILDSERVER1</id>
			<name>BUILDSERVER1-releases</name>
			<url>http://buildserver1:8081/artifactory/libs-release-local</url>
		</repository>
		<repository>
			<id>java.net-Public</id>
			<name>Maven Java Net Snapshots and Releases</name>
			<url>https://maven.java.net/content/groups/public/</url>
		</repository>
		<repository>
			<id>repository.jboss.org-public</id>
			<name>JBoss.org Maven repository</name>
			<url>https://repository.jboss.org/nexus/content/groups/public</url>
		</repository>
	</repositories>
	<dependencies>
		<dependency>
			<groupId>com.versionone</groupId>
			<artifactId>VersionOne.SDK.Java.ObjectModel</artifactId>
			<version>12.1.0.150</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jgit</groupId>
			<artifactId>org.eclipse.jgit</artifactId>
			<version>2.3.1.201302201838-r</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.2.3.Final</version>
		</dependency>
		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derby</artifactId>
			<version>10.10.1.1</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-plugin-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
			</plugin>
		</plugins>
	</reporting>
</project>